#@AUTOEXEC
// Global Constants
//constantsOLD
#define SP_MAX 2.5
#define SP_MIN .5
//for other armrest depth
//#define EN_MAX 415262
//#define EN_MIN 10000

//for drive armrest depth 
//#define EN_MAX 443018 
//for display depth
#define EN_MAX 973030 
#define EN_MIN 0
//zone definition
#define STOP_ZONE 30000
#define SLOW_ZONE 90000
//index of where values appear in IP 
//all are 1 bit too high, but have 1 subtracted from them
//ToDo try removing the +1 offset and -1 subtraction in isbitset
#define TOG_DOWN_INDEX 29
#define TOG_UP_INDEX 31
#define LS_DOWN_INDEX 30
#define LS_UP_INDEX 28
#define BRAKE_OPEN_INDEX 19
#define BRAKE_CLOSED_INDEX 17
//LED toggle constants
#define RED 6 //TW param for ethercat led red
#define GREEN 5 //TW param for ethercat led green
#define OFF 4 //TW param for ethercat led off
//State constants
#define STOPPED 0
#define MOVING_FORWARD 1
#define MOVING_BACKWARD 2
#define SLOWING_FORWARD 3
#define SLOWING_BACKWARD 4
//Output pins
#define RAIL_BRAKE_EN 1
#define MOTOR_BRAKE_EN 2
#define RAIL_BRAKE_POWER 7
//input pins
#define LS_UP_PIN 12
#define LS_DOWN_PIN 14
#define TOG_UP_PIN 13
#define TOG_DOWN_PIN 15
//brake configurations
#define RAIL_BRAKE_USED 0
#define MOTOR_BRAKE_USED 0

//Global Variables
//State machine and debug
int stateVal
int debug_var
int debug_st
int bitSet

//input vars
int togDown
int togUp
int lsDown
int lsUp
int isOpen
int isClosed

//speed calc vars
int speed
int end_speed
int new_speed
int x
int m

//Zone markers
int fwd_stop 
int fwd_slow
int bwd_stop
int bwd_slow

//initalization
ledTog(RED)//set led
debug_var = 1
while(SO == 0)
	debug_var = 2
	MO = 1
	wait(50)
end
ledTog(GREEN)
debug_var = 3
main()

return

//---------------------------------------------------------------------
// Main Function (also the default entry point)
function main()

	global int stateVal
	global int bitSet
	global int debug_var
	global int debug_st
	
	global int togDown
	global int togUp
	global int lsDown
	global int lsUp
	global int isOpen
	global int isClosed
	
	global int speed
	global int end_speed
	global int new_speed
	global int x
	global int m	
	
	global int fwd_stop 
	global int fwd_slow
	global int bwd_stop
	global int bwd_slow
	
	fwd_stop = EN_MAX - STOP_ZONE
	fwd_slow = EN_MAX - SLOW_ZONE
	bwd_stop = EN_MIN + STOP_ZONE
	bwd_slow = EN_MIN + SLOW_ZONE
	
	
	//initialize
	stepInit()
	pinInit()
	shutdown()
	debug_var = 4
	ledTog(OFF)

	
	//configure motion values
	speed = 2000000
	SD = 20000000
	inBitPol(IP)
	stateVal=STOPPED
	end_speed = speed*.1
	
	//infinite loop. ToDo remove reduntant loops (main and this one) by putting code done in 
	//main outisde of main and eliminating this loop
	while(1)
		inBitPol(IP)
		debug_st = stateVal
		switch(stateVal)
		case(MOVING_FORWARD)
		    if(togUp==0)
		        ST
		        shutdown()
		        stateVal=STOPPED
		    end
		    if(PX > fwd_stop)
		        ST
		        shutdown()
		        stateVal=STOPPED
		    end
		    if(PX > (fwd_slow))
		        stateVal = SLOWING_FORWARD
		        BG
		    end
		    //end case moving forward
		    
		case(MOVING_BACKWARD)
		    if(togDown==0)
		        ST
		        shutdown()
		        stateVal=STOPPED
		    end
		    if(PX < (bwd_stop))
		        ST
		        shutdown()
		        stateVal=STOPPED
		    end
		    if(PX < (bwd_slow))
		        stateVal=SLOWING_BACKWARD
		    end
		    //end case moving backwards
		    
		case(SLOWING_FORWARD)
		    if(togUp==0)
			ST
			shutdown()
			stateVal=STOPPED
		    elseif(PX >EN_MAX) //don't change state
		        ST
		    else
		        upD8Spd()
		        BG
		    end
		    
		case(SLOWING_BACKWARD)
		    if(togDown==0)
			ST
			shutdown()
			stateVal=STOPPED
		    elseif(PX < (EN_MIN)) //don't change state
		        ST
		    else
		        upD8Spd()
		        BG
		    end
		case(STOPPED)
		ledTog(OFF)
		    if((togDown > 0) && (PX > bwd_stop))
		       	startup()
		       	JV=-1*speed
		       	BG
		       	stateVal=MOVING_BACKWARD
		    elseif((togUp > 0)  && (PX < fwd_stop))//ToDo debug this
		        startup()
		        JV=speed
		        BG
		        stateVal=MOVING_FORWARD
		    end
		    //end Stopped
		end //end switch
		wait(10)
	end//end while
return//return to end main()

//---------------------------------------------------------------------
// User Functions

//Updates speed based on position within slow zones
//checks stateVal to see which directoin motion is in
function upD8Spd()
	global int speed
	global int stateVal
	global int togDown
	global int togUp
	global int lsDown
	global int lsUp
	global int debug_var
	global int end_speed
	
	//Store PX value so it doesnt change on us mid function
	int pos
	//Slow and stop zone values
	int fwd_stop 
	int fwd_slow
	int bwd_stop
	int bwd_slow
	//Caluclation variables
	global int new_speed
	global int x
	global int m
	
	pos = PX
	fwd_stop = EN_MAX - STOP_ZONE
	fwd_slow = EN_MAX - SLOW_ZONE
	bwd_stop = EN_MIN + STOP_ZONE
	bwd_slow = EN_MIN + SLOW_ZONE

	switch(stateVal)
		case(SLOWING_BACKWARD)
			x = pos - bwd_stop
			m = (speed - end_speed) / (bwd_slow - bwd_stop)
			new_speed = m * x + end_speed 
			JV = -new_speed

		case(SLOWING_FORWARD)
			x = pos - fwd_slow
			m = (end_speed - speed) / (fwd_stop - fwd_slow)
			new_speed = m * x + speed 
			JV = new_speed
	end //switch block end
return

//Updates status flags for limit switches and toggle switches
// n_ip: input bits
function inBitPol(int n_ip)
	
	global int bitSet
	global int togDown
	global int togUp
	global int lsDown
	global int lsUp
	global int isOpen
	global int isClosed
	
	togDown = n_ip&(1<<(TOG_DOWN_INDEX-1))
	togUp = n_ip&(1<<(TOG_UP_INDEX-1))
	lsDown = n_ip&(1<<(LS_DOWN_INDEX-1))
	lsUp = n_ip&(1<<(LS_UP_INDEX-1))
	isOpen = n_ip&(1<<(BRAKE_OPEN_INDEX-1))
	isClosed = n_ip&(1<<(BRAKE_CLOSED_INDEX-1))
return;

function ledTog(int val)
	//sets ethercat LED to designated value
	TW[16]=val
return;

//~~~~~~

//function to initialize in stepper mode
function stepInit()
	//initialization
	if (UM!=6) // Ensure motor is in stepper mode
		MO=0 // Disable motor	
		until (SO==0)
	end
	if (MO==0) // Change the motor to position mode and enable the motor
		UM=6 // Set position mode//changed to stepper mode
		MO=1 // Enable motor
		until (SO==1)
	end
return;

// funciton to smoothly shut down stepper
// shut down the motor to stop them from "singing" while stationary.
// (if you don't do this you will know what I mean).
function shutdown()
	global int isOpen
	global int isClosed
	
  	JV = 0 // stop motor before brakeing
	if(RAIL_BRAKE_USED)// Rail brake case
	  	OB[RAIL_BRAKE_EN] = 0 // 0V (Closed) Brakeing before disabling motor to prevent backsliding
	 	while(isClosed == 0)// Poll brake status until brake is closed
			inBitPol(IP)
		end
	elseif(MOTOR_BRAKE_USED)// Motor brake case
		while(OB[MOTOR_BRAKE_EN] == 0)
			OB[MOTOR_BRAKE_EN] = 1
		end
	end
		
 	MO=0 // motor off command
 	until (SO==0) // motor off status
return;

//function to smoothly start up motor
function startup()
	global int isOpen
	global int isClosed
	
	if(RAIL_BRAKE_USED)// Rail brake case
		OB[RAIL_BRAKE_EN] = 1 //24V (Open)
		while(isOpen == 0)// Poll brake status until brake is open
			inBitPol(IP)
		end
	elseif(MOTOR_BRAKE_USED)//Motor brake case
		while(OB[MOTOR_BRAKE_EN ] == 1)
			OB[MOTOR_BRAKE_EN ] = 0
		end
	end
	MO = 1 // motor on command
	until (SO==1) // motor on status
return;

// function to do all pin configurations
function pinInit()
	IL[LS_DOWN_PIN]=8 // Reverse limit switch low
	IL[LS_UP_PIN]=10 // Forward limit switch low
	IL[TOG_UP_PIN]=7 // gen purpose on high
	IL[TOG_DOWN_PIN]=7 // gen purpose on high

	//brake outputs off by default
	//OL[RAIL_BRAKE_EN] = 0
	//OL[RAIL_BRAKE_POWER] = 0
	//OL[MOTOR_BRAKE_EN] = 0
	
	// turn brake power on
	// rail brake case
	if(RAIL_BRAKE_USED)
		OL[RAIL_BRAKE_EN] = 1 // Output 1 gen purpose, high logic level
		OL[RAIL_BRAKE_POWER] = 1 // Output 7 gen purpose, high logic level
		
			
		while(OB[RAIL_BRAKE_POWER] == 0)
			OB[RAIL_BRAKE_POWER] = 1
		end
	
		//engage brake
		while(OB[RAIL_BRAKE_EN] == 1)
			OB[RAIL_BRAKE_EN] = 0
		end
	elseif(MOTOR_BRAKE_USED)
		OL[MOTOR_BRAKE_EN] = 1 // Output 1 gen purpose, high logic level
		while(OB[MOTOR_BRAKE_EN] == 1)
			OB[MOTOR_BRAKE_EN] = 0
		end
	end//if statement block end
	
return;
//---------------------------------------------------------------------